/*
 * File: app/controller/MainController.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Orders.controller.MainController', {
    extend: 'Ext.app.Controller',

    stores: [
        'Customers',
        'Orders',
        'LineItems',
        'PeriodTotals',
        'CustomerCategories',
        'Items'
    ],

    refs: [
        {
            ref: 'customers',
            selector: 'main > #cards'
        },
        {
            ref: 'customerDetail',
            selector: 'customerdetail'
        },
        {
            ref: 'orderDetail',
            selector: 'orderdetail'
        },
        {
            ref: 'main',
            selector: 'main'
        },
        {
            ref: 'cardCt',
            selector: '#cardCt'
        }
    ],

    onCustomerSelect: function(customer, eventOptions) {
        var detailCard = this.getCustomerDetail();
        detailCard.setCustomer(customer);
        detailCard.ownerCt.getLayout().setActiveItem(detailCard);

        var args = {
            params: {
                customerId: customer.getId()
            }
        };
        this.getOrdersStore().load(args);
        this.getPeriodTotalsStore().load(args);
    },

    onOrderSelect: function(customerdetail, customer, order, eventOptions) {
        var orderCard = this.getOrderDetail();
        orderCard.setCustomer(customer);
        orderCard.setOrder(order);
        orderCard.ownerCt.getLayout().setActiveItem(orderCard);

        this.getLineItemsStore().load({
            params: {
        		orderId: order.get('orderId')
            }
        });

    },

    onCardSwitch: function(component, eOpts) {
        this.getMain().updateBreadcrumbs();
    },

    onBreadcrumbsBreadcrumbactivate: function(breadcrumbs, index, eventOptions) {
        this.getCardCt().getLayout().setActiveItem(index);
    },

    onNewOrder: function(customer, eventOptions) {
        var orderCard = this.getOrderDetail();
        orderCard.setCustomer(customer);
        orderCard.setOrder(null);
        orderCard.ownerCt.getLayout().setActiveItem(orderCard);

        this.getLineItemsStore().removeAll();

        orderCard.startEditingNew();
    },

    onOrderCancel: function(eventOptions) {
        this.getCardCt().getLayout().setActiveItem(this.getCustomerDetail());
    },

    onOrderSave: function(customer, order, lineItems, eventOptions) {
        var me = this,
            i = 0,
            len = lineItems.length,
            customerId = customer.getId();
        for(; i < len; i++) {
            lineItems[i] = Ext.copyTo({
                customerId: customerId
            }, lineItems[i].getData(), 'quantityOrdered,perUnitPrice,itemId');
        }

        order = Ext.copyTo({
            customerId: customerId,
            orderDate: new Date,
            shippedDate: null,
            details: lineItems
        }, order.getData(), 'shipping,tax,total');

        Fulfill.ss.DXCustomers.createOrder(order, function(provider, response) {
            //console.log(response);
            if (response.result) {
                me.getMain().displayMessage('New order was successfully created.');
                me.onCustomerSelect(customer);
            } else {
                Ext.Msg.alert('Error', 'There was an error creating the order:<br>' + response.message);
            }
        });

    },

    init: function(application) {
        this.control({
            "customers": {
                customerselect: this.onCustomerSelect
            },
            "panel": {
                orderselect: this.onOrderSelect,
                neworder: this.onNewOrder,
                ordercancel: this.onOrderCancel,
                ordersave: this.onOrderSave
            },
            "main > #cardCt > component": {
                activate: this.onCardSwitch
            },
            "breadcrumbs": {
                breadcrumbactivate: this.onBreadcrumbsBreadcrumbactivate
            }
        });
    }

});
