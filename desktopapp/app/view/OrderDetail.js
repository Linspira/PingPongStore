/*
 * File: app/view/OrderDetail.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Orders.view.OrderDetail', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.orderdetail',

    requires: [
        'Orders.view.MoneyColumn',
        'Ext.button.Button',
        'Ext.grid.Panel',
        'Ext.grid.column.Template',
        'Ext.form.field.ComboBox',
        'Ext.XTemplate',
        'Ext.form.field.Number',
        'Ext.grid.plugin.CellEditing',
        'Ext.grid.View'
    ],

    title: '{name}',

    layout: {
        type: 'vbox',
        align: 'stretch',
        padding: 10
    },

    initComponent: function() {
        var me = this;

        me.addEvents(
            'ordersave',
            'ordercancel'
        );

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'container',
                    margins: '0 0 10',
                    items: [
                        {
                            xtype: 'button',
                            itemId: 'addBtn',
                            iconCls: 'icon-add',
                            text: 'New Item',
                            listeners: {
                                click: {
                                    fn: me.onAddBtnClick,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'gridpanel',
                    flex: 1,
                    disableSelection: true,
                    sortableColumns: false,
                    store: 'LineItems',
                    columns: [
                        {
                            xtype: 'templatecolumn',
                            tpl: [
                                '{itemName}'
                            ],
                            dataIndex: 'itemId',
                            text: 'Item',
                            flex: 1,
                            editor: {
                                xtype: 'combobox',
                                displayField: 'name',
                                forceSelection: true,
                                store: 'Items',
                                valueField: 'itemId'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'quantityOrdered',
                            text: 'Quantity',
                            editor: {
                                xtype: 'numberfield',
                                allowDecimals: false,
                                minValue: 1
                            }
                        },
                        {
                            xtype: 'moneycolumn',
                            dataIndex: 'perUnitPrice',
                            text: 'Unit Price'
                        },
                        {
                            xtype: 'moneycolumn',
                            dataIndex: 'totalPrice',
                            text: 'Total Price'
                        }
                    ],
                    listeners: {
                        edit: {
                            fn: me.onGridpanelEdit,
                            scope: me
                        }
                    },
                    plugins: [
                        Ext.create('Ext.grid.plugin.CellEditing', {
                            pluginId: 'edit',
                            clicksToEdit: 1,
                            listeners: {
                                beforeedit: {
                                    fn: me.onCellEditingBeforeEdit,
                                    scope: me
                                }
                            }
                        })
                    ],
                    viewConfig: {
                        markDirty: false,
                        stripeRows: false
                    }
                },
                {
                    xtype: 'component',
                    margins: '0 0 20',
                    cls: 'orderTotals',
                    data: {
                        subTotal: 12345,
                        shipping: 12,
                        tax: 23,
                        total: 12380
                    },
                    itemId: 'totals',
                    tpl: [
                        '<table>',
                        '    <tr><th>Sub Total</th><td>{subTotal:currency}</td></tr>',
                        '    <tr><th>Shipping</th><td>{shipping:currency}</td></tr>',
                        '    <tr><th>Tax</th><td>{tax:currency}</td></tr>',
                        '    <tr class="total"><th>Grand Total</th><td>{total:currency}</td></tr>',
                        '</table>'
                    ]
                },
                {
                    xtype: 'container',
                    itemId: 'buttonCt',
                    layout: {
                        type: 'hbox',
                        align: 'stretch',
                        defaultMargins: '0 0 0 10',
                        pack: 'end'
                    },
                    items: [
                        {
                            xtype: 'button',
                            itemId: 'cancelBtn',
                            iconCls: 'icon-cancel',
                            text: 'Cancel',
                            listeners: {
                                click: {
                                    fn: me.onCancelBtnClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'saveBtn',
                            iconCls: 'icon-save',
                            text: 'Save',
                            listeners: {
                                click: {
                                    fn: me.onSaveBtnClick,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onAddBtnClick: function(button, e, eOpts) {
        this.startEditingNew();
    },

    onGridpanelEdit: function(editor, context, eOpts) {
        var store = context.grid.getStore(),
            record = context.record,
            itemId = record.get('itemId'),
            item = itemId && Ext.StoreManager.lookup('Items').findRecord('itemId', itemId);
        if (item) {
            record.beginEdit();
            record.set('itemName', item.get('name'));
            record.set('perUnitPrice', item.get('perUnitPrice'));
            record.set('totalPrice', item.get('perUnitPrice') * record.get('quantityOrdered'));
            record.endEdit();
        } else {
            store.remove(record);
        }
        this.updateTotals();
    },

    onCellEditingBeforeEdit: function(editor, e, eOpts) {
        // prevent editing when viewing an existing order
        return !!this.isNewOrder;
    },

    onCancelBtnClick: function(button, e, eOpts) {
        this.fireEvent('ordercancel');
    },

    onSaveBtnClick: function(button, e, eOpts) {
        this.fireEvent('ordersave', this.customer, this.order, this.child('gridpanel').getStore().getRange());
    },

    setCustomer: function(customer) {
        var me = this;
        //me.child('contactinfo').update(customer.getData());
        me.customer = customer;
    },

    setOrder: function(order) {
        var addButton = this.down('#addBtn'),
            buttons = this.child('#buttonCt'),
            grid = this.child('gridpanel');

        this.isNewOrder = !order;
        if (order) {
            this.setTitle('Order ' + order.get('orderNo'));
            addButton.hide();
            buttons.hide();
        } else {
            order = Ext.create('Orders.model.Order', {subTotal:0, shipping:0, tax:0, total:0});
            this.setTitle('New Order');
            addButton.show();
            buttons.show();
        }

        this.down('#totals').update(order.getData());
        this.order = order;

    },

    updateTotals: function() {
        var grid = this.child('gridpanel'),
            store = grid.getStore(),
            taxRate = 0.05, //assumed flat tax
            data = {
                subTotal: 0,
                tax: 0,
                shipping: 10, //assumed flat shipping
                total: 0
            };

        store.each(function(lineItem) {
            var itemPrice = lineItem.get('totalPrice') || 0,
                itemTax = itemPrice * taxRate;
            data.subTotal += itemPrice;
            data.tax += itemTax;
            data.total += itemPrice + itemTax + data.shipping;
        });

        this.order.set(data);
        this.down('#totals').update(data);
    },

    startEditingNew: function() {
        var grid = this.child('gridpanel'),
            store = grid.getStore(),
            record = store.add({quantityOrdered: 1})[0];

        grid.getPlugin('edit').startEdit(record, 0);
    }

});